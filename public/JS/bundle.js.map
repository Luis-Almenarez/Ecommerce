{"version":3,"file":"bundle.js","sources":["../../src/JS/menu.js","../../src/JS/productCart.js","../../src/JS/cart.js","../../src/JS/app.js","../../src/JS/tabs.js"],"sourcesContent":["// Obtén el botón de abrir/cerrar el menú\r\nconst nav = document.querySelector(\".header__nav\");\r\nconst open = document.querySelector(\".open__menu\");\r\nconst main = document.querySelector(\".main\");\r\n\r\n// Agrega un controlador de eventos al botón\r\nopen.addEventListener(\"click\", () => {\r\n  // Verifica si el menú está abierto o cerrado\r\n  if (nav.classList.contains(\"visible\")) {\r\n    // Cierra el menú\r\n    nav.classList.toggle(\"visible\");\r\n  } else {\r\n    // Abre el menú\r\n    nav.classList.add(\"visible\");\r\n  }\r\n});\r\n\r\ndocument.addEventListener(\"click\", (e) => {\r\n  if (main.contains(e.target) && e.target !== open) {\r\n    nav.classList.remove(\"visible\");\r\n  }\r\n});\r\n","const product = document.getElementById(\"product\");\r\nconst productImage = document.querySelector(\".product__image\");\r\nconst thumbs = document.querySelector(\".product__thumbs\");\r\n/*BOTONTES CANTIDAD*/\r\nconst btnPlus = document.querySelector(\"#increase-quantity\");\r\nconst btnMinus = document.querySelector(\"#decrease-quantity\");\r\nlet inputQuantity = document.querySelector(\"#quantity\");\r\n/*BOTONTES CANTIDAD*/\r\n\r\n// Selecciona el color\r\nconst colorSelected = product.querySelector(\"#property-color\");\r\n\r\n// Agrega un evento de clic al elemento 'thumbs' (las miniaturas de imágenes del producto).\r\nthumbs.addEventListener(\"click\", (e) => {\r\n  // Verifica si el objetivo del evento de clic es una etiqueta 'IMG'.\r\n  if (e.target.tagName === \"IMG\") {\r\n    // Obtiene la fuente (src) de la imagen que se hizo clic.\r\n    const imageSrc = e.target.src;\r\n\r\n    // Encuentra la última barra diagonal en la ruta de la imagen.\r\n    const lastIndex = imageSrc.lastIndexOf(\"/\");\r\n\r\n    // Extrae el nombre de la imagen a partir de la ruta completa.\r\n    const nameImage = imageSrc.substring(lastIndex + 1);\r\n    // Actualiza la fuente de la imagen principal del producto con la nueva imagen seleccionada.\r\n    productImage.src = `./public/img/products/${nameImage}`;\r\n  }\r\n});\r\n\r\n// Con esta función actualizo la miniatura del color que se haya seleccionado\r\ncolorSelected.addEventListener(\"click\", (e) => {\r\n  if (e.target.tagName === \"INPUT\") {\r\n    const color = e.target.value;\r\n    productImage.src = `./public/img/products/${color}.jpg`;\r\n\r\n    // Cambia las rutas de las miniaturas según el color seleccionado\r\n    const thumbnails = document.querySelectorAll(\".product__thumb-img\");\r\n    thumbnails.forEach((thumbnail, index) => {\r\n      thumbnail.src = `./public/img/thumbs/${color}/${color}${index + 1}.jpg`;\r\n    });\r\n  }\r\n});\r\n\r\n// Con esta función incremento en 1 el valor del input siempre que se haga click\r\nbtnPlus.addEventListener(\"click\", (e) => {\r\n  inputQuantity.value = parseInt(inputQuantity.value) + 1;\r\n});\r\n\r\n// Con esta función disminuyo en 1 el valor del input siempre que se haga click\r\nbtnMinus.addEventListener(\"click\", (e) => {\r\n  inputQuantity.value = parseInt(inputQuantity.value) - 1;\r\n  if (parseInt(inputQuantity.value) <= 1) {\r\n    inputQuantity.value = 1;\r\n  }\r\n});\r\n","import productsData from \"./Data/dataProducts.json\";\r\n// Selecciona los botones de abrir el carrito por su atributo 'data-accion'.\r\nconst btnOpenCart = document.querySelectorAll('[data-accion=\"open-cart\"]');\r\n// Selecciona los botones de cerrar el carrito por su atributo 'data-accion'.\r\nconst btnCloseCart = document.querySelectorAll('[data-accion=\"close-cart\"]');\r\n// Obtiene el elemento del carrito por su ID.\r\nconst windowCart = document.getElementById(\"cart\");\r\n// Obtiene el botón 'Add to Cart' del HTML\r\nconst addCart = document.getElementById(\"add-cart\");\r\n// Obtiene el contenedor de todo el producto\r\nconst product = document.getElementById(\"product\");\r\nconst cartNotification = document.getElementById(\"notification\");\r\n\r\n// Se crea una instancia de Intl.NumberFormat para formatear valores como moneda en inglés estadounidense\r\nconst formatMoney = new Intl.NumberFormat(\"EN-EEUU\", { style: \"currency\", currency: \"USD\" });\r\n\r\n// Generamos una variable la cual tendrá la cantidad de productos que el usuario agregue\r\nlet cartProduct = [];\r\n\r\n// Función para renderizar el contenido del carrito y mostrarlo al usuario.\r\nconst renderCart = () => {\r\n  // Agrega la clase \"cart--active\" para mostrar la ventana del carrito.\r\n  windowCart.classList.add(\"cart--active\");\r\n\r\n  // Eliminamos los productos que hay contenidos en el carrito para que no los duplique si se vuelve a abrir\r\n  const productsInCart = windowCart.querySelectorAll(\".cart__product\");\r\n  productsInCart.forEach((product) => product.remove());\r\n\r\n  let total = 0;\r\n\r\n  //Si no existen productos en el carrito agregamos la clase 'cart--empty' de lo contrario mostramos los productos que en él hay.\r\n  if (cartProduct.length < 1) {\r\n    windowCart.classList.add(\"cart--empty\");\r\n  } else {\r\n    //En caso de que haya un producto eliminamos la clase 'cart--empty' y mostramos lo que haya dentro\r\n    windowCart.classList.remove(\"cart--empty\");\r\n    // Itera a través de cada producto en el array \"cartProduct\".\r\n    cartProduct.forEach((cartProduct) => {\r\n      /* Se obtiene el precio del archivo dataProducts.json\r\n       siempre y cuando el id del item coincide con el que está en dataProducts.json */\r\n      productsData.products.forEach((productDataBase) => {\r\n        if (productDataBase.id === cartProduct.id) {\r\n          cartProduct.price = productDataBase.price;\r\n\r\n          total += productDataBase.price * cartProduct.quantity;\r\n        }\r\n      });\r\n\r\n      // Establece la ruta de la imagen que se quiere mostrar dependiendo de la decisión del usuario\r\n      let thumbSrc = product.querySelectorAll(\".product__thumb-img\")[0].src;\r\n      if (cartProduct.color === \"silver\") {\r\n        thumbSrc = \"./public/img/thumbs/silver/silver.jpg\";\r\n      } else if (cartProduct.color === \"blue\") {\r\n        thumbSrc = \"./public/img/thumbs/blue/blue.jpg\";\r\n      } else if (cartProduct.color === \"black\") {\r\n        thumbSrc = \"./public/img/thumbs/black/black.jpg\";\r\n      }\r\n      // Genera una plantilla HTML para representar el producto en el carrito.\r\n      let templateProduct = `\r\n        <div class=\"cart__product-info\">\r\n          <img src=\"${thumbSrc}\" alt=\"\" class=\"cart__thumb\" />\r\n          <div>\r\n            <p class=\"cart__product-name\">\r\n              <span class=\"cart__product-quantity\">${cartProduct.quantity} x </span>${cartProduct.name}\r\n            </p>\r\n            <p class=\"cart__product-properties\">\r\n              Shipping Type:<span>${cartProduct.ShippingType}</span> Color:<span>${cartProduct.color}</span>\r\n            </p>\r\n          </div>\r\n        </div>\r\n        <div class=\"cart__product-container-price\">\r\n          <button class=\"cart__btn-remove-item\" data-accion=\"remove-item-cart\">\r\n            <i class=\"bi bi-x\"></i>\r\n          </button>\r\n          <p class=\"cart__product-price\">$${cartProduct.price * cartProduct.quantity}</p>\r\n        </div>\r\n      `;\r\n\r\n      // Crea un nuevo elemento div para el producto en el carrito.\r\n      let itemCart = document.createElement(\"div\");\r\n\r\n      // Agrega la clase \"cart__product\" al elemento div creado.\r\n      itemCart.classList.add(\"cart__product\");\r\n\r\n      // Asigna la plantilla HTML como contenido del elemento div.\r\n      itemCart.innerHTML = templateProduct;\r\n\r\n      // Agrega el elemento del producto al cuerpo del carrito.\r\n      windowCart.querySelector(\".cart__body\").appendChild(itemCart);\r\n    });\r\n  }\r\n\r\n  windowCart.querySelector(\".cart__total\").textContent = formatMoney.format(total);\r\n};\r\n\r\n// Carga los productos del carrito desde localStorage si existen\r\nconst storedCartProduct = localStorage.getItem(\"cartProduct\");\r\nif (storedCartProduct) {\r\n  cartProduct = JSON.parse(storedCartProduct);\r\n  if (cartProduct.length >= 1) {\r\n    renderCart(); // Actualiza el carrito para mostrar los productos recuperados\r\n  }\r\n}\r\n\r\n// Abrir carrito.\r\nbtnOpenCart.forEach((btn) => {\r\n  btn.addEventListener(\"click\", (e) => {\r\n    renderCart(); // Muestra el carrito al hacer clic en un botón de abrir.\r\n  });\r\n});\r\n\r\n// Cerrar carrito.\r\nbtnCloseCart.forEach((btn) => {\r\n  btn.addEventListener(\"click\", (e) => {\r\n    windowCart.classList.remove(\"cart--active\"); // Oculta el carrito al hacer clic en un botón de cerrar.\r\n  });\r\n});\r\n\r\n// Cuando se hace clic en el botón \"addCart\", se recopilan los datos del producto seleccionado\r\n// y se agregan al array \"cartProduct\" para mostrarlos en el carrito más tarde.\r\naddCart.addEventListener(\"click\", (e) => {\r\n  let id = product.dataset.productoId; // Obtiene el ID del producto desde el atributo \"data-producto-id\".\r\n  let name = product.querySelector(\".product__name\").innerText; // Obtiene el nombre del producto.\r\n  let quantity = parseInt(product.querySelector(\"#quantity\").value); // Obtiene la cantidad del producto como un número entero.\r\n  let color = product.querySelector(\"#property-color input:checked\").value; // Obtiene el color seleccionado del producto.\r\n  let ShippingType = product.querySelector(\"#property-shipping input:checked\").value; // Obtiene el tipo de envío seleccionado para el producto.\r\n\r\n  if (cartProduct.length > 0) {\r\n    let productInCart = false;\r\n    cartProduct.forEach((item) => {\r\n      if (item.id === id && item.name === name && item.color === color && item.ShippingType === ShippingType) {\r\n        item.quantity += quantity;\r\n        productInCart = true;\r\n      }\r\n    });\r\n    if (!productInCart) {\r\n      // Agrega los datos recopilados como un nuevo objeto al array \"cartProduct\".\r\n      cartProduct.push({\r\n        id: id,\r\n        name: name,\r\n        quantity: quantity,\r\n        color: color,\r\n        ShippingType: ShippingType,\r\n      });\r\n    }\r\n  } else {\r\n    // Agrega los datos recopilados como un nuevo objeto al array \"cartProduct\".\r\n    cartProduct.push({\r\n      id: id,\r\n      name: name,\r\n      quantity: quantity,\r\n      color: color,\r\n      ShippingType: ShippingType,\r\n    });\r\n  }\r\n\r\n  //Establecemos la ruta de la imagen que se motrará cuando se preione agregar al carrito\r\n  let srcThumb = product.querySelectorAll(\".product__thumb-img\")[0].src;\r\n  if (color === \"silver\") {\r\n    srcThumb = \"./public/img/thumbs/silver/silver.jpg\";\r\n  } else if (color === \"blue\") {\r\n    srcThumb = \"./public/img/thumbs/blue/blue.jpg\";\r\n  }\r\n  cartNotification.querySelector(\"img\").src = srcThumb;\r\n\r\n  // Agrega la clase active para que se muestre la notificación de agregado al carrito\r\n  cartNotification.classList.add(\"notification--active\");\r\n\r\n  // Oculta la notificación después de que hayan pasado 3 segundos\r\n  setTimeout(() => {\r\n    cartNotification.classList.remove(\"notification--active\");\r\n  }, 2000);\r\n\r\n  // Guarda cartProduct en localStorage\r\n  localStorage.setItem(\"cartProduct\", JSON.stringify(cartProduct));\r\n});\r\n\r\n/*Esta función gestiona los eventos de clic en el carrito de compras.\r\n  Permite eliminar productos del carrito haciendo clic en el botón de eliminar. */\r\nwindowCart.addEventListener(\"click\", (e) => {\r\n  if (e.target.closest(\"button\")?.dataset.accion === \"remove-item-cart\") {\r\n    // Obtiene el elemento del producto que se va a eliminar.\r\n    let myProduct = e.target.closest(\".cart__product\");\r\n    // Encuentra el índice del producto en el carrito.\r\n    let productIndex = [...windowCart.querySelectorAll(\".cart__product\")].indexOf(myProduct);\r\n\r\n    // Filtra el producto eliminado del array 'cartProduct'.\r\n    cartProduct = cartProduct.filter((item, index) => {\r\n      if (index !== productIndex) {\r\n        return item;\r\n      }\r\n    });\r\n\r\n    // Actualiza el localStorage para reflejar los cambios.\r\n    localStorage.setItem(\"cartProduct\", JSON.stringify(cartProduct));\r\n\r\n    // Vuelve a renderizar el carrito para reflejar los cambios.\r\n    renderCart();\r\n  }\r\n});\r\n\r\n// Genera la animación del carrito de compras al hacer click en el botón 'BUY'\r\n//Se utiliza la librería SweetAlert2\r\nwindowCart.querySelector(\"#cart__btn-buy\").addEventListener(\"click\", () => {\r\n  Swal.fire({\r\n    title: \"Do you want to purchase what's in the cart?\",\r\n    showDenyButton: true,\r\n    showCancelButton: true,\r\n    confirmButtonText: \"YES\",\r\n    denyButtonText: `Continue shopping`,\r\n    customClass: {\r\n      popup: \"large-swal\",\r\n    },\r\n  }).then((result) => {\r\n    if (result.isConfirmed) {\r\n      Swal.fire(\"Successful purchase completed.\", \"\", \"success\");\r\n    } else if (result.isDenied) {\r\n      Swal.fire(\"Changes are not saved\", \"\", \"info\");\r\n    }\r\n  });\r\n});\r\n","// import \"./animation\";\r\nimport \"./menu\";\r\nimport \"./productCart\";\r\nimport \"./cart\";\r\nimport Tabs from \"./tabs\";\r\n\r\nnew Tabs(\"more-info\");\r\n","//  Creamos una clase Tabs para gestionar pestañas de contenido.\r\nexport default class Tabs {\r\n  constructor(idElement) {\r\n    //Creamos una variable donde capturamos el componente principal\r\n    this.Tabs = document.getElementById(idElement);\r\n    //Creamos una variable donde capturamos la tab o pestaña del componente principal\r\n    this.nav = this.Tabs.querySelector(\".tabs\");\r\n\r\n    // Agrega un evento de escucha al elemento de navegación para gestionar el cambio de pestañas.\r\n    this.nav.addEventListener(\"click\", (event) => {\r\n      // Obtenemos  el valor del atributo \"data-tab\" del botón clicado.\r\n      if ([...event.target.classList].includes(\"tabs__button\")) {\r\n        const tab = event.target.dataset.tab;\r\n\r\n        //Verificamos si el componente tiene la clase tab--active, en caso de que lo tenga la retiramos.\r\n        if (this.Tabs.querySelector(\".tab--active\")) {\r\n          this.Tabs.querySelector(\".tab--active\").classList.remove(\"tab--active\");\r\n        }\r\n\r\n        // Activa la pestaña clickeada ocultando otras.\r\n        this.Tabs.querySelector(`#${tab}`).classList.add(\"tab--active\");\r\n        if (this.Tabs.querySelector(\".tabs__button--active\")) {\r\n          this.Tabs.querySelector(\".tabs__button--active\").classList.remove(\"tabs__button--active\");\r\n        }\r\n\r\n        //Agregamos la clase --active al botón clickeado\r\n        event.target.classList.add(\"tabs__button--active\");\r\n      }\r\n    });\r\n  }\r\n}\r\n"],"names":["nav","document","querySelector","open","main","addEventListener","classList","contains","toggle","add","e","target","remove","product","getElementById","productImage","thumbs","btnPlus","btnMinus","inputQuantity","colorSelected","tagName","imageSrc","src","lastIndex","lastIndexOf","nameImage","substring","color","value","querySelectorAll","forEach","thumbnail","index","parseInt","btnOpenCart","btnCloseCart","windowCart","addCart","cartNotification","formatMoney","Intl","NumberFormat","style","currency","cartProduct","renderCart","total","length","productsData","products","productDataBase","id","price","quantity","thumbSrc","templateProduct","name","ShippingType","itemCart","createElement","innerHTML","appendChild","textContent","format","storedCartProduct","localStorage","getItem","JSON","parse","btn","dataset","productoId","innerText","productInCart","item","push","srcThumb","setTimeout","setItem","stringify","closest","accion","myProduct","productIndex","indexOf","filter","Swal","fire","title","showDenyButton","showCancelButton","confirmButtonText","denyButtonText","customClass","popup","then","result","isConfirmed","isDenied","constructor","idElement","this","Tabs","event","includes","tab"],"mappings":"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"}